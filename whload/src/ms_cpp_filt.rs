//! Microsoft C++ demangling


#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
enum LeafName {
    /// The name for a regular leaf.
    ///
    /// Something not starting with `?` but ending with `@`.
    Fragment(String),

    /// The name for a special leaf.
    ///
    /// `?` followed by zero or more `_` followed by one of `0` to `9` or `A` to `Z`.
    Special(SpecialName),
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
enum SpecialName {
    Constructor,
    Destructor,
    OperatorNew,
    OperatorDelete,
    OperatorEqual,
    OperatorGreaterGreater,
    OperatorLessLess,
    OperatorExclamation,
    OperatorEqualEqual,
    OperatorExclamationEqual,
    OperatorSquareBrackets,
    OperatorReturnType,
    OperatorHyphenGreater,
    OperatorAsterisk,
    OperatorPlusPlus,
    OperatorHyphenHyphen,
    OperatorHyphen,
    OperatorPlus,
    OperatorAmpersand,
    OperatorHyphenGreaterAsterisk,
    OperatorSlash,
    OperatorPercent,
    OperatorLess,
    OperatorLessEqual,
    OperatorGreater,
    OperatorGreaterEqual,
    OperatorComma,
    OperatorCall,
    OperatorTilde,
    OperatorCircumflex,
    OperatorPipe,
    OperatorAmpersandAmpersand,
    OperatorPipePipe,
    OperatorAsteriskEqual,
    OperatorPlusEqual,
    OperatorHyphenEqual,
    OperatorSlashEqual,
    OperatorPercentEqual,
    OperatorGreaterGreaterEqual,
    OperatorLessLessEqual,
    OperatorAmpersandEqual,
    OperatorPipeEqual,
    OperatorCircumflexEqual,
    VirtualFunctionTable,
    VirtualBaseTable,
    VCall,
    TypeOf,
    LocalStaticGuard,
    StringConstant,
    VirtualBaseDestructor,
    VectorDeletingDestructor,
    DefaultConstructorClosure,
    ScalarDeletingDestructor,
    VectorConstructorIterator,
    VectorDestructorIterator,
    VectorVirtualBaseConstructorIterator,
    VirtualDisplacementMap,
    ExceptionHandlingVectorConstructorIterator,
    ExceptionHandlingVectorDestructorIterator,
    ExceptionHandlingVectorVirtualBaseConstructorIterator,
    CopyConstructorClosure,
    UdtReturning,
    UnknownQ,
    RuntimeTypeInformationCode,
    LocalVirtualFunctionTable,
    LocalVirtualFunctionTableConstructorClosure,
    OperatorNewArray,
    OperatorDeleteArray,
    OmniCallSignature,
    PlacementDeleteClosure,
    PlacementDeleteArrayClosure,
    ManagedVectorConstructorIterator,
    ManagedVectorDestructorIterator,
    ExceptionHandlingVectorCopyConstructorIterator,
    ExceptionHandlingVectorBaseCopyConstructorIterator,
    DynamicInitializer,
    DynamicAtExitDestructor,
    VectorCopyConstructorIterator,
    VectorVirtualBaseCopyConstructorIterator,
    ManagedVectorCopyConstructorIterator,
    LocalStaticThreadGuard,
    UserDefinedLiteralOperator,
}
impl SpecialName {
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "0" => Some(Self::Constructor),
            "1" => Some(Self::Destructor),
            "2" => Some(Self::OperatorNew),
            "3" => Some(Self::OperatorDelete),
            "4" => Some(Self::OperatorEqual),
            "5" => Some(Self::OperatorGreaterGreater),
            "6" => Some(Self::OperatorLessLess),
            "7" => Some(Self::OperatorExclamation),
            "8" => Some(Self::OperatorEqualEqual),
            "9" => Some(Self::OperatorExclamationEqual),
            "A" => Some(Self::OperatorSquareBrackets),
            "B" => Some(Self::OperatorReturnType),
            "C" => Some(Self::OperatorHyphenGreater),
            "D" => Some(Self::OperatorAsterisk),
            "E" => Some(Self::OperatorPlusPlus),
            "F" => Some(Self::OperatorHyphenHyphen),
            "G" => Some(Self::OperatorHyphen),
            "H" => Some(Self::OperatorPlus),
            "I" => Some(Self::OperatorAmpersand),
            "J" => Some(Self::OperatorHyphenGreaterAsterisk),
            "K" => Some(Self::OperatorSlash),
            "L" => Some(Self::OperatorPercent),
            "M" => Some(Self::OperatorLess),
            "N" => Some(Self::OperatorLessEqual),
            "O" => Some(Self::OperatorGreater),
            "P" => Some(Self::OperatorGreaterEqual),
            "Q" => Some(Self::OperatorComma),
            "R" => Some(Self::OperatorCall),
            "S" => Some(Self::OperatorTilde),
            "T" => Some(Self::OperatorCircumflex),
            "U" => Some(Self::OperatorPipe),
            "V" => Some(Self::OperatorAmpersandAmpersand),
            "W" => Some(Self::OperatorPipePipe),
            "X" => Some(Self::OperatorAsteriskEqual),
            "Y" => Some(Self::OperatorPlusEqual),
            "Z" => Some(Self::OperatorHyphenEqual),
            "_0" => Some(Self::OperatorSlashEqual),
            "_1" => Some(Self::OperatorPercentEqual),
            "_2" => Some(Self::OperatorGreaterGreaterEqual),
            "_3" => Some(Self::OperatorLessLessEqual),
            "_4" => Some(Self::OperatorAmpersandEqual),
            "_5" => Some(Self::OperatorPipeEqual),
            "_6" => Some(Self::OperatorCircumflexEqual),
            "_7" => Some(Self::VirtualFunctionTable),
            "_8" => Some(Self::VirtualBaseTable),
            "_9" => Some(Self::VCall),
            "_A" => Some(Self::TypeOf),
            "_B" => Some(Self::LocalStaticGuard),
            "_C" => Some(Self::StringConstant),
            "_D" => Some(Self::VirtualBaseDestructor),
            "_E" => Some(Self::VectorDeletingDestructor),
            "_F" => Some(Self::DefaultConstructorClosure),
            "_G" => Some(Self::ScalarDeletingDestructor),
            "_H" => Some(Self::VectorConstructorIterator),
            "_I" => Some(Self::VectorDestructorIterator),
            "_J" => Some(Self::VectorVirtualBaseConstructorIterator),
            "_K" => Some(Self::VirtualDisplacementMap),
            "_L" => Some(Self::ExceptionHandlingVectorConstructorIterator),
            "_M" => Some(Self::ExceptionHandlingVectorDestructorIterator),
            "_N" => Some(Self::ExceptionHandlingVectorVirtualBaseConstructorIterator),
            "_O" => Some(Self::CopyConstructorClosure),
            "_P" => Some(Self::UdtReturning),
            "_Q" => Some(Self::UnknownQ),
            "_R" => Some(Self::RuntimeTypeInformationCode),
            "_S" => Some(Self::LocalVirtualFunctionTable),
            "_T" => Some(Self::LocalVirtualFunctionTableConstructorClosure),
            "_U" => Some(Self::OperatorNewArray),
            "_V" => Some(Self::OperatorDeleteArray),
            "_W" => Some(Self::OmniCallSignature),
            "_X" => Some(Self::PlacementDeleteClosure),
            "_Y" => Some(Self::PlacementDeleteArrayClosure),
            // _Z was skipped
            "__A" => Some(Self::ManagedVectorConstructorIterator),
            "__B" => Some(Self::ManagedVectorDestructorIterator),
            "__C" => Some(Self::ExceptionHandlingVectorCopyConstructorIterator),
            "__D" => Some(Self::ExceptionHandlingVectorBaseCopyConstructorIterator),
            "__E" => Some(Self::DynamicInitializer),
            "__F" => Some(Self::DynamicAtExitDestructor),
            "__G" => Some(Self::VectorCopyConstructorIterator),
            "__H" => Some(Self::VectorVirtualBaseCopyConstructorIterator),
            "__I" => Some(Self::ManagedVectorCopyConstructorIterator),
            "__J" => Some(Self::LocalStaticThreadGuard),
            "__K" => Some(Self::UserDefinedLiteralOperator),
            _ => None,
        }
    }

    pub fn as_str(&self) -> &'static str {
        match self {
            Self::Constructor => "0",
            Self::Destructor => "1",
            Self::OperatorNew => "2",
            Self::OperatorDelete => "3",
            Self::OperatorEqual => "4",
            Self::OperatorGreaterGreater => "5",
            Self::OperatorLessLess => "6",
            Self::OperatorExclamation => "7",
            Self::OperatorEqualEqual => "8",
            Self::OperatorExclamationEqual => "9",
            Self::OperatorSquareBrackets => "A",
            Self::OperatorReturnType => "B",
            Self::OperatorHyphenGreater => "C",
            Self::OperatorAsterisk => "D",
            Self::OperatorPlusPlus => "E",
            Self::OperatorHyphenHyphen => "F",
            Self::OperatorHyphen => "G",
            Self::OperatorPlus => "H",
            Self::OperatorAmpersand => "I",
            Self::OperatorHyphenGreaterAsterisk => "J",
            Self::OperatorSlash => "K",
            Self::OperatorPercent => "L",
            Self::OperatorLess => "M",
            Self::OperatorLessEqual => "N",
            Self::OperatorGreater => "O",
            Self::OperatorGreaterEqual => "P",
            Self::OperatorComma => "Q",
            Self::OperatorCall => "R",
            Self::OperatorTilde => "S",
            Self::OperatorCircumflex => "T",
            Self::OperatorPipe => "U",
            Self::OperatorAmpersandAmpersand => "V",
            Self::OperatorPipePipe => "W",
            Self::OperatorAsteriskEqual => "X",
            Self::OperatorPlusEqual => "Y",
            Self::OperatorHyphenEqual => "Z",
            Self::OperatorSlashEqual => "_0",
            Self::OperatorPercentEqual => "_1",
            Self::OperatorGreaterGreaterEqual => "_2",
            Self::OperatorLessLessEqual => "_3",
            Self::OperatorAmpersandEqual => "_4",
            Self::OperatorPipeEqual => "_5",
            Self::OperatorCircumflexEqual => "_6",
            Self::VirtualFunctionTable => "_7",
            Self::VirtualBaseTable => "_8",
            Self::VCall => "_9",
            Self::TypeOf => "_A",
            Self::LocalStaticGuard => "_B",
            Self::StringConstant => "_C",
            Self::VirtualBaseDestructor => "_D",
            Self::VectorDeletingDestructor => "_E",
            Self::DefaultConstructorClosure => "_F",
            Self::ScalarDeletingDestructor => "_G",
            Self::VectorConstructorIterator => "_H",
            Self::VectorDestructorIterator => "_I",
            Self::VectorVirtualBaseConstructorIterator => "_J",
            Self::VirtualDisplacementMap => "_K",
            Self::ExceptionHandlingVectorConstructorIterator => "_L",
            Self::ExceptionHandlingVectorDestructorIterator => "_M",
            Self::ExceptionHandlingVectorVirtualBaseConstructorIterator => "_N",
            Self::CopyConstructorClosure => "_O",
            Self::UdtReturning => "_P",
            Self::UnknownQ => "_Q",
            Self::RuntimeTypeInformationCode => "_R",
            Self::LocalVirtualFunctionTable => "_S",
            Self::LocalVirtualFunctionTableConstructorClosure => "_T",
            Self::OperatorNewArray => "_U",
            Self::OperatorDeleteArray => "_V",
            Self::OmniCallSignature => "_W",
            Self::PlacementDeleteClosure => "_X",
            Self::PlacementDeleteArrayClosure => "_Y",
            Self::ManagedVectorConstructorIterator => "__A",
            Self::ManagedVectorDestructorIterator => "__B",
            Self::ExceptionHandlingVectorCopyConstructorIterator => "__C",
            Self::ExceptionHandlingVectorBaseCopyConstructorIterator => "__D",
            Self::DynamicInitializer => "__E",
            Self::DynamicAtExitDestructor => "__F",
            Self::VectorCopyConstructorIterator => "__G",
            Self::VectorVirtualBaseCopyConstructorIterator => "__H",
            Self::ManagedVectorCopyConstructorIterator => "__I",
            Self::LocalStaticThreadGuard => "__J",
            Self::UserDefinedLiteralOperator => "__K",
        }
    }
}


pub fn demangle_cpp_name(name: &str) -> Option<String> {
    if !name.starts_with("?") {
        // not a C++ name
        return None;
    }
    let mut remaining_slice = &name[1..];

    // the first bit is a name fragment or special name

    // TODO
    None
}
